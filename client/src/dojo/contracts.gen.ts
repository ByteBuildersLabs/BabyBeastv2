// Generated by dojo-bindgen on Thu, 22 Aug 2024 20:04:33 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript`
import { DojoProvider } from "@dojoengine/core";
import { Account } from "starknet";

export type IClient = Awaited<ReturnType<typeof client>>;

export function client(provider: DojoProvider) {
    // System definitions for `dojo_starter-actions` contract
    const actions_spawn = async (account: Account) => {
        try {
            return await provider.execute(
                account,
                {
                    contractName: "actions",
                    entrypoint: "spawn",
                    calldata: [],
                },
                "dojo_starter"
            );
        } catch (error) {
            console.error(error);
        }
    };

    const actions_decreaseStats = async (account: Account) => {
        try {
            return await provider.execute(
                account,
                {
                    contractName: "actions",
                    entrypoint: "decrease_stats",
                    calldata: [],
                },
                "dojo_starter"
            );
        } catch (error) {
            console.error(error);
        }
    };

    const actions_feed = async (account: Account) => {
        try {
            return await provider.execute(
                account,
                {
                    contractName: "actions",
                    entrypoint: "feed",
                    calldata: [],
                },
                "dojo_starter"
            );
        } catch (error) {
            console.error(error);
        }
    };

    const actions_sleep = async (account: Account) => {
        try {
            return await provider.execute(
                account,
                {
                    contractName: "actions",
                    entrypoint: "sleep",
                    calldata: [],
                },
                "dojo_starter"
            );
        } catch (error) {
            console.error(error);
        }
    };

    const actions_awake = async (account: Account) => {
        try {
            return await provider.execute(
                account,
                {
                    contractName: "actions",
                    entrypoint: "awake",
                    calldata: [],
                },
                "dojo_starter"
            );
        } catch (error) {
            console.error(error);
        }
    };

    const actions_play = async (account: Account) => {
        try {
            return await provider.execute(
                account,
                {
                    contractName: "actions",
                    entrypoint: "play",
                    calldata: [],
                },
                "dojo_starter"
            );
        } catch (error) {
            console.error(error);
        }
    };

    const actions_clean = async (account: Account) => {
        try {
            return await provider.execute(
                account,
                {
                    contractName: "actions",
                    entrypoint: "clean",
                    calldata: [],
                },
                "dojo_starter"
            );
        } catch (error) {
            console.error(error);
        }
    };

    const actions_revive = async (account: Account) => {
        try {
            return await provider.execute(
                account,
                {
                    contractName: "actions",
                    entrypoint: "revive",
                    calldata: [],
                },
                "dojo_starter"
            );
        } catch (error) {
            console.error(error);
        }
    };

    return {
        actions: {
            spawn: actions_spawn,
            decreaseStats: actions_decreaseStats,
            feed: actions_feed,
            sleep: actions_sleep,
            awake: actions_awake,
            play: actions_play,
            clean: actions_clean,
            revive: actions_revive,
        },
    };
}
